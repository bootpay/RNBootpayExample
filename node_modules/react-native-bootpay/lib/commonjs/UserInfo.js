"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNativeDeviceInfo = _interopRequireDefault(require("react-native-device-info"));

var _reactNativeSensitiveInfo = _interopRequireDefault(require("react-native-sensitive-info"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class UserInfo extends _react.Component {}

exports.default = UserInfo;

_defineProperty(UserInfo, "getBootpayInfo", (key, defaultVal) => {
  return new Promise((resolve, reject) => {
    _reactNativeSensitiveInfo.default.getItem(key, {
      sharedPreferencesName: 'bootpaySharedPrefs',
      keychainService: 'bootpayKeychain'
    }).then(res => {
      res == undefined ? resolve(defaultVal) : resolve(res);
      resolve(res);
    }).catch(error => {
      reject(error);
    });
  });
});

_defineProperty(UserInfo, "setBootpayInfo", (key, val) => {
  return new Promise((resolve, reject) => {
    _reactNativeSensitiveInfo.default.setItem(String(key), String(val), {
      sharedPreferencesName: 'bootpaySharedPrefs',
      keychainService: 'bootpayKeychain'
    }).then(res => {
      resolve(res);
    }).catch(error => {
      reject(error);
    });
  });
});

_defineProperty(UserInfo, "getBootpayUUID", () => {
  let uuid = _reactNativeDeviceInfo.default.getUniqueId();

  return UserInfo.setBootpayInfo('uuid', uuid);
  return UserInfo.setBootpayInfo('uuid', uuid);
});

_defineProperty(UserInfo, "getBootpaySK", () => {
  return UserInfo.getBootpayInfo('bootpay_sk', '');
});

_defineProperty(UserInfo, "setBootpaySK", val => {
  return UserInfo.setBootpayInfo('bootpay_sk', val);
});

_defineProperty(UserInfo, "newBootpaySK", (uuid, time) => {
  return UserInfo.setBootpaySK("".concat(uuid, "_").concat(time));
});

_defineProperty(UserInfo, "getBootpayLastTime", async () => {
  const time = await UserInfo.getBootpayInfo('bootpay_last_time', 0);
  return parseInt(time);
});

_defineProperty(UserInfo, "setBootpayLastTime", val => {
  return UserInfo.setBootpayInfo('bootpay_last_time', val);
});

_defineProperty(UserInfo, "getBootpayUserId", () => {
  return UserInfo.getBootpayInfo('bootpay_user_id', '');
});

_defineProperty(UserInfo, "setBootpayUserId", val => {
  return UserInfo.setBootpayInfo('bootpay_user_id', val);
});

_defineProperty(UserInfo, "updateInfo", async () => {
  const uuid = await UserInfo.getBootpayUUID();
  const bootpaySK = await UserInfo.getBootpaySK();
  const lastTime = await UserInfo.getBootpayLastTime();
  if (bootpaySK == '') await UserInfo.newBootpaySK(uuid, current);
  const current = Date.now();
  const isExpired = current - lastTime > 30 * 60 * 1000;
  if (isExpired) UserInfo.newBootpaySK(uuid, current);
  UserInfo.setBootpayLastTime(current);
});
//# sourceMappingURL=UserInfo.js.map