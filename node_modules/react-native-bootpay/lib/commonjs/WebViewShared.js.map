{"version":3,"sources":["WebViewShared.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","defaultOriginWhitelist","extractOrigin","url","result","exec","originWhitelistToRegex","originWhitelist","replace","passesWhitelist","compiledWhitelist","origin","some","x","RegExp","test","compileWhitelist","map","createOnShouldStartLoadWithRequest","loadRequest","onShouldStartLoadWithRequest","_a","nativeEvent","shouldStart","lockIdentifier","Linking","canOpenURL","then","supported","openURL","console","warn","undefined","e","defaultRenderLoading","styles","loadingOrErrorView","defaultRenderError","errorDomain","errorCode","errorDesc","errorTextTitle","errorText"],"mappings":"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","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport escapeStringRegexp from 'escape-string-regexp';\nimport React from 'react';\nimport { Linking, View, ActivityIndicator, Text } from 'react-native';\nimport styles from './WebView.styles';\nvar defaultOriginWhitelist = ['http://*', 'https://*'];\nvar extractOrigin = function (url) {\n    var result = /^[A-Za-z][A-Za-z0-9+\\-.]+:(\\/\\/)?[^/]*/.exec(url);\n    return result === null ? '' : result[0];\n};\nvar originWhitelistToRegex = function (originWhitelist) {\n    return \"^\" + escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g, '.*');\n};\nvar passesWhitelist = function (compiledWhitelist, url) {\n    var origin = extractOrigin(url);\n    return compiledWhitelist.some(function (x) { return new RegExp(x).test(origin); });\n};\nvar compileWhitelist = function (originWhitelist) {\n    return __spreadArrays(['about:blank'], (originWhitelist || [])).map(originWhitelistToRegex);\n};\nvar createOnShouldStartLoadWithRequest = function (loadRequest, originWhitelist, onShouldStartLoadWithRequest) {\n    return function (_a) {\n        var nativeEvent = _a.nativeEvent;\n        var shouldStart = true;\n        var url = nativeEvent.url, lockIdentifier = nativeEvent.lockIdentifier;\n        if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {\n            Linking.canOpenURL(url).then(function (supported) {\n                if (supported) {\n                    return Linking.openURL(url);\n                }\n                console.warn(\"Can't open url: \" + url);\n                return undefined;\n            })[\"catch\"](function (e) {\n                console.warn('Error opening URL: ', e);\n            });\n            shouldStart = false;\n        }\n        else if (onShouldStartLoadWithRequest) {\n            shouldStart = onShouldStartLoadWithRequest(nativeEvent);\n        }\n        loadRequest(shouldStart, url, lockIdentifier);\n    };\n};\nvar defaultRenderLoading = function () { return (<View style={styles.loadingOrErrorView}>\n    <ActivityIndicator />\n  </View>); };\nvar defaultRenderError = function (errorDomain, errorCode, errorDesc) { return (<View style={styles.loadingOrErrorView}>\n    <Text style={styles.errorTextTitle}>Error loading page</Text>\n    <Text style={styles.errorText}>{\"Domain: \" + errorDomain}</Text>\n    <Text style={styles.errorText}>{\"Error Code: \" + errorCode}</Text>\n    <Text style={styles.errorText}>{\"Description: \" + errorDesc}</Text>\n  </View>); };\nexport { defaultOriginWhitelist, createOnShouldStartLoadWithRequest, defaultRenderLoading, defaultRenderError, };\n"]}