"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultRenderError = exports.defaultRenderLoading = exports.createOnShouldStartLoadWithRequest = exports.defaultOriginWhitelist = void 0;

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _WebView = _interopRequireDefault(require("./WebView.styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var defaultOriginWhitelist = ['http://*', 'https://*'];
exports.defaultOriginWhitelist = defaultOriginWhitelist;

var extractOrigin = function (url) {
  var result = /^[A-Za-z][A-Za-z0-9+\-.]+:(\/\/)?[^/]*/.exec(url);
  return result === null ? '' : result[0];
};

var originWhitelistToRegex = function (originWhitelist) {
  return "^" + (0, _escapeStringRegexp.default)(originWhitelist).replace(/\\\*/g, '.*');
};

var passesWhitelist = function (compiledWhitelist, url) {
  var origin = extractOrigin(url);
  return compiledWhitelist.some(function (x) {
    return new RegExp(x).test(origin);
  });
};

var compileWhitelist = function (originWhitelist) {
  return __spreadArrays(['about:blank'], originWhitelist || []).map(originWhitelistToRegex);
};

var createOnShouldStartLoadWithRequest = function (loadRequest, originWhitelist, onShouldStartLoadWithRequest) {
  return function (_a) {
    var nativeEvent = _a.nativeEvent;
    var shouldStart = true;
    var url = nativeEvent.url,
        lockIdentifier = nativeEvent.lockIdentifier;

    if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {
      _reactNative.Linking.canOpenURL(url).then(function (supported) {
        if (supported) {
          return _reactNative.Linking.openURL(url);
        }

        console.warn("Can't open url: " + url);
        return undefined;
      })["catch"](function (e) {
        console.warn('Error opening URL: ', e);
      });

      shouldStart = false;
    } else if (onShouldStartLoadWithRequest) {
      shouldStart = onShouldStartLoadWithRequest(nativeEvent);
    }

    loadRequest(shouldStart, url, lockIdentifier);
  };
};

exports.createOnShouldStartLoadWithRequest = createOnShouldStartLoadWithRequest;

var defaultRenderLoading = function () {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _WebView.default.loadingOrErrorView
  }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, null));
};

exports.defaultRenderLoading = defaultRenderLoading;

var defaultRenderError = function (errorDomain, errorCode, errorDesc) {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _WebView.default.loadingOrErrorView
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: _WebView.default.errorTextTitle
  }, "Error loading page"), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: _WebView.default.errorText
  }, "Domain: " + errorDomain), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: _WebView.default.errorText
  }, "Error Code: " + errorCode), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: _WebView.default.errorText
  }, "Description: " + errorDesc));
};

exports.defaultRenderError = defaultRenderError;
//# sourceMappingURL=WebViewShared.js.map