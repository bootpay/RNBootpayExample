{"version":3,"sources":["WebView.android.d.ts"],"names":["React","WebView"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;gBAMcC,O;;gBAAAA,O","sourcesContent":["import React from 'react';\nimport { createOnShouldStartLoadWithRequest } from './WebViewShared';\nimport { WebViewRenderProcessGoneEvent, WebViewErrorEvent, WebViewHttpErrorEvent, WebViewMessageEvent, WebViewNavigationEvent, WebViewProgressEvent, AndroidWebViewProps, NativeWebViewAndroid, State } from './WebViewTypes';\n/**\n * Renders a native WebView.\n */\ndeclare class WebView extends React.Component<AndroidWebViewProps, State> {\n    static defaultProps: {\n        overScrollMode: string;\n        javaScriptEnabled: boolean;\n        thirdPartyCookiesEnabled: boolean;\n        scalesPageToFit: boolean;\n        allowsFullscreenVideo: boolean;\n        allowFileAccess: boolean;\n        saveFormDataDisabled: boolean;\n        cacheEnabled: boolean;\n        androidHardwareAccelerationDisabled: boolean;\n        androidLayerType: string;\n        originWhitelist: string[];\n        setSupportMultipleWindows: boolean;\n    };\n    static isFileUploadSupported: () => Promise<any>;\n    startUrl: string | null;\n    state: State;\n    onShouldStartLoadWithRequest: ReturnType<typeof createOnShouldStartLoadWithRequest> | null;\n    webViewRef: React.RefObject<NativeWebViewAndroid>;\n    messagingModuleName: string;\n    componentDidMount: () => void;\n    getCommands: () => {\n        goForward: number;\n        goBack: number;\n        reload: number;\n        stopLoading: number;\n        postMessage: number;\n        injectJavaScript: number;\n        loadUrl: number;\n        requestFocus: number;\n        clearHistory: number;\n        clearCache: number;\n        clearFormData: number;\n    };\n    goForward: () => void;\n    goBack: () => void;\n    reload: () => void;\n    stopLoading: () => void;\n    requestFocus: () => void;\n    postMessage: (data: string) => void;\n    clearFormData: () => void;\n    clearCache: (includeDiskFiles: boolean) => void;\n    clearHistory: () => void;\n    /**\n     * Injects a javascript string into the referenced WebView. Deliberately does not\n     * return a response because using eval() to return a response breaks this method\n     * on pages with a Content Security Policy that disallows eval(). If you need that\n     * functionality, look into postMessage/onMessage.\n     */\n    injectJavaScript: (data: string) => void;\n    /**\n     * We return an event with a bunch of fields including:\n     *  url, title, loading, canGoBack, canGoForward\n     */\n    updateNavigationState: (event: WebViewNavigationEvent) => void;\n    /**\n     * Returns the native `WebView` node.\n     */\n    getWebViewHandle: () => number;\n    onLoadingStart: (event: WebViewNavigationEvent) => void;\n    onLoadingError: (event: WebViewErrorEvent) => void;\n    onHttpError: (event: WebViewHttpErrorEvent) => void;\n    onRenderProcessGone: (event: WebViewRenderProcessGoneEvent) => void;\n    onLoadingFinish: (event: WebViewNavigationEvent) => void;\n    onMessage: (event: WebViewMessageEvent) => void;\n    onLoadingProgress: (event: WebViewProgressEvent) => void;\n    onShouldStartLoadWithRequestCallback: (shouldStart: boolean, url: string, lockIdentifier?: number | undefined) => void;\n    render(): JSX.Element;\n}\nexport default WebView;\n//# sourceMappingURL=WebView.android.d.ts.map"]}