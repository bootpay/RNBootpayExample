function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { SafeAreaView, Modal, Platform } from 'react-native';
import WebView from './WebView';
import UserInfo from './UserInfo';
export class BootpayWebView extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      visibility: false,
      script: '',
      firstLoad: false
    });

    _defineProperty(this, "request", (payload, items, user, extra) => {
      payload.application_id = Platform.OS == 'ios' ? this.props.ios_application_id : this.props.android_application_id;
      payload.items = items;
      payload.user = user;
      payload.extra = extra; //visibility가 true가 되면 webview onLoaded가 실행됨        

      this.setState({
        visibility: true,
        script: 'if(BootPay == undefined || BootPay.request == undefined) {return;} BootPay.request(' + JSON.stringify(payload) + ')',
        firstLoad: false
      });
      UserInfo.updateInfo();
    });

    _defineProperty(this, "dismiss", () => {
      this.setState(({
        visibility
      }) => ({
        visibility: false
      }));
      this.removePaymentWindow();
    });

    _defineProperty(this, "onLoadEnd", async e => {
      if (this.state.firstLoad == true) return;
      this.setBootpayPlatform();
      await this.setAnalyticsData();
      this.goBootpayRequest();
      this.setState({ ...this,
        firstLoad: true
      });
    });

    _defineProperty(this, "generateScript", script => {
      const onError = '.error(function(data){ window.ReactNativeWebView.postMessage( JSON.stringify(data) ); })';
      const onCancel = '.cancel(function(data){ window.ReactNativeWebView.postMessage( JSON.stringify(data) ); })';
      const onReady = '.ready(function(data){ window.ReactNativeWebView.postMessage( JSON.stringify(data) ); })';
      const onConfirm = '.confirm(function(data){ window.ReactNativeWebView.postMessage( JSON.stringify(data) ); })';
      const onClose = '.close(function(data){ window.ReactNativeWebView.postMessage("close"); })';
      return script + onError + onCancel + onReady + onConfirm + onClose + '; void(0);';
    });

    _defineProperty(this, "onMessage", ({
      nativeEvent
    }) => {
      if (nativeEvent == undefined || nativeEvent.data == undefined) return;

      if (nativeEvent.data == 'close') {
        if (this.props.onClose == undefined) return;
        json = {
          action: 'BootpayClose',
          message: '결제창이 닫혔습니다'
        };
        this.props.onClose(json);
        this.dismiss();
        return;
      }

      const data = JSON.parse(nativeEvent.data);

      switch (data.action) {
        case 'BootpayCancel':
          if (this.props.onCancel != undefined) this.props.onCancel(data);
          break;

        case 'BootpayError':
          if (this.props.onError != undefined) this.props.onError(data);
          break;

        case 'BootpayBankReady':
          if (this.props.onReady != undefined) this.props.onReady(data);
          break;

        case 'BootpayConfirm':
          if (this.props.onConfirm != undefined) this.props.onConfirm(data);
          break;

        case 'BootpayDone':
          if (this.props.onDone != undefined) this.props.onDone(data);
          break;
      }
    });

    _defineProperty(this, "onShouldStartLoadWithRequest", url => {
      return true; // goBootpayRequest();
    });

    _defineProperty(this, "setBootpayPlatform", () => {
      if (Platform.OS == 'ios') {
        this.injectJavaScript("\n  BootPay.setDevice('IOS');\n          ");
      } else if (Platform.OS == 'android') {
        this.injectJavaScript("\n  BootPay.setDevice('ANDROID');\n          ");
      }
    });

    _defineProperty(this, "goBootpayRequest", () => {
      const fullScript = this.generateScript(this.state.script);
      this.injectJavaScript(fullScript);
    });

    _defineProperty(this, "transactionConfirm", data => {
      this.injectJavaScript("\n        var data = JSON.parse(".concat(data, "); \n        BootPay.transactionConfirm(data);\n          "));
    });

    _defineProperty(this, "removePaymentWindow", () => {
      this.injectJavaScript("\n        BootPay.removePaymentWindow();\n          ");
    });

    _defineProperty(this, "injectJavaScript", script => {
      if (this.wv == null || this.wv == undefined) return;
      this.wv.injectJavaScript("\n        javascript:(function(){".concat(script, " })()\n          "));
    });

    _defineProperty(this, "setAnalyticsData", async () => {
      const uuid = await UserInfo.getBootpayUUID();
      const bootpaySK = await UserInfo.getBootpaySK();
      const bootLastTime = await UserInfo.getBootpayLastTime();
      const elaspedTime = Date.now() - bootLastTime;
      this.injectJavaScript(" \n        window.BootPay.setAnalyticsData({uuid:'".concat(uuid, "',sk:'").concat(bootpaySK, "',sk_time:").concat(bootLastTime, ",time:").concat(elaspedTime, "});\n        "));
    });
  }

  async componentWillUnmount() {
    this.setState({
      visibility: false,
      script: '',
      firstLoad: false
    });
    UserInfo.setBootpayLastTime(Date.now());
  }

  render() {
    const injectedJavascript = "(function() {\n                window.postMessage = function(data) {\n            window.ReactNativeWebView.postMessage(data);\n            };\n        })()";
    return /*#__PURE__*/React.createElement(Modal, {
      animationType: 'slide',
      transparent: false,
      visible: this.state.visibility
    }, /*#__PURE__*/React.createElement(SafeAreaView, {
      style: {
        flex: 1
      }
    }, /*#__PURE__*/React.createElement(WebView, {
      ref: wv => this.wv = wv,
      useWebKit: true,
      originWhitelist: ['*'],
      source: {
        uri: 'https://inapp.bootpay.co.kr/3.3.1/production.html'
      },
      javaScriptEnabled: true,
      javaScriptCanOpenWindowsAutomatically: true,
      scalesPageToFit: true,
      onLoadEnd: this.onLoadEnd,
      onMessage: this.onMessage,
      onShouldStartLoadWithRequest: this.onShouldStartLoadWithRequest
    })));
  }

} // BootpayWebView.prototype =
//# sourceMappingURL=BootpayWebView.js.map