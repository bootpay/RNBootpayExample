function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import DeviceInfo from 'react-native-device-info';
import SInfo from 'react-native-sensitive-info';
export default class UserInfo extends Component {}

_defineProperty(UserInfo, "getBootpayInfo", (key, defaultVal) => {
  return new Promise((resolve, reject) => {
    SInfo.getItem(key, {
      sharedPreferencesName: 'bootpaySharedPrefs',
      keychainService: 'bootpayKeychain'
    }).then(res => {
      res == undefined ? resolve(defaultVal) : resolve(res);
      resolve(res);
    }).catch(error => {
      reject(error);
    });
  });
});

_defineProperty(UserInfo, "setBootpayInfo", (key, val) => {
  return new Promise((resolve, reject) => {
    SInfo.setItem(String(key), String(val), {
      sharedPreferencesName: 'bootpaySharedPrefs',
      keychainService: 'bootpayKeychain'
    }).then(res => {
      resolve(res);
    }).catch(error => {
      reject(error);
    });
  });
});

_defineProperty(UserInfo, "getBootpayUUID", () => {
  let uuid = DeviceInfo.getUniqueId();
  return UserInfo.setBootpayInfo('uuid', uuid);
  return UserInfo.setBootpayInfo('uuid', uuid);
});

_defineProperty(UserInfo, "getBootpaySK", () => {
  return UserInfo.getBootpayInfo('bootpay_sk', '');
});

_defineProperty(UserInfo, "setBootpaySK", val => {
  return UserInfo.setBootpayInfo('bootpay_sk', val);
});

_defineProperty(UserInfo, "newBootpaySK", (uuid, time) => {
  return UserInfo.setBootpaySK("".concat(uuid, "_").concat(time));
});

_defineProperty(UserInfo, "getBootpayLastTime", async () => {
  const time = await UserInfo.getBootpayInfo('bootpay_last_time', 0);
  return parseInt(time);
});

_defineProperty(UserInfo, "setBootpayLastTime", val => {
  return UserInfo.setBootpayInfo('bootpay_last_time', val);
});

_defineProperty(UserInfo, "getBootpayUserId", () => {
  return UserInfo.getBootpayInfo('bootpay_user_id', '');
});

_defineProperty(UserInfo, "setBootpayUserId", val => {
  return UserInfo.setBootpayInfo('bootpay_user_id', val);
});

_defineProperty(UserInfo, "updateInfo", async () => {
  const uuid = await UserInfo.getBootpayUUID();
  const bootpaySK = await UserInfo.getBootpaySK();
  const lastTime = await UserInfo.getBootpayLastTime();
  if (bootpaySK == '') await UserInfo.newBootpaySK(uuid, current);
  const current = Date.now();
  const isExpired = current - lastTime > 30 * 60 * 1000;
  if (isExpired) UserInfo.newBootpaySK(uuid, current);
  UserInfo.setBootpayLastTime(current);
});
//# sourceMappingURL=UserInfo.js.map