{"version":3,"sources":["WebViewTypes.d.ts"],"names":["Component"],"mappings":"AAAA,SAAuBA,SAAvB,QAAwC,OAAxC;AA81BA","sourcesContent":["import { ReactElement, Component } from 'react';\nimport { NativeSyntheticEvent, ViewProps, StyleProp, ViewStyle, NativeMethodsMixin, Constructor, UIManagerStatic, NativeScrollEvent } from 'react-native';\ndeclare type WebViewCommands = 'goForward' | 'goBack' | 'reload' | 'stopLoading' | 'postMessage' | 'injectJavaScript' | 'loadUrl' | 'requestFocus';\ndeclare type AndroidWebViewCommands = 'clearHistory' | 'clearCache' | 'clearFormData';\ninterface BPCWebViewUIManager<Commands extends string> extends UIManagerStatic {\n    getViewManagerConfig: (name: string) => {\n        Commands: {\n            [key in Commands]: number;\n        };\n    };\n}\nexport declare type BPCWebViewUIManagerAndroid = BPCWebViewUIManager<WebViewCommands | AndroidWebViewCommands>;\nexport declare type BPCWebViewUIManagerIOS = BPCWebViewUIManager<WebViewCommands>;\nexport declare type BPCWebViewUIManagerMacOS = BPCWebViewUIManager<WebViewCommands>;\nexport declare type BPCWebViewUIManagerWindows = BPCWebViewUIManager<WebViewCommands>;\ndeclare type WebViewState = 'IDLE' | 'LOADING' | 'ERROR';\ninterface BaseState {\n    viewState: WebViewState;\n}\ninterface NormalState extends BaseState {\n    viewState: 'IDLE' | 'LOADING';\n    lastErrorEvent: WebViewError | null;\n}\ninterface ErrorState extends BaseState {\n    viewState: 'ERROR';\n    lastErrorEvent: WebViewError;\n}\nexport declare type State = NormalState | ErrorState;\ndeclare class NativeWebViewIOSComponent extends Component<IOSNativeWebViewProps> {\n}\ndeclare const NativeWebViewIOSBase: Constructor<NativeMethodsMixin> & typeof NativeWebViewIOSComponent;\nexport declare class NativeWebViewIOS extends NativeWebViewIOSBase {\n}\ndeclare class NativeWebViewMacOSComponent extends Component<MacOSNativeWebViewProps> {\n}\ndeclare const NativeWebViewMacOSBase: Constructor<NativeMethodsMixin> & typeof NativeWebViewMacOSComponent;\nexport declare class NativeWebViewMacOS extends NativeWebViewMacOSBase {\n}\ndeclare class NativeWebViewAndroidComponent extends Component<AndroidNativeWebViewProps> {\n}\ndeclare const NativeWebViewAndroidBase: Constructor<NativeMethodsMixin> & typeof NativeWebViewAndroidComponent;\nexport declare class NativeWebViewAndroid extends NativeWebViewAndroidBase {\n}\ndeclare class NativeWebViewWindowsComponent extends Component<WindowsNativeWebViewProps> {\n}\ndeclare const NativeWebViewWindowsBase: Constructor<NativeMethodsMixin> & typeof NativeWebViewWindowsComponent;\nexport declare class NativeWebViewWindows extends NativeWebViewWindowsBase {\n}\nexport interface ContentInsetProp {\n    top?: number;\n    left?: number;\n    bottom?: number;\n    right?: number;\n}\nexport interface WebViewNativeEvent {\n    url: string;\n    loading: boolean;\n    title: string;\n    canGoBack: boolean;\n    canGoForward: boolean;\n    lockIdentifier: number;\n}\nexport interface WebViewNativeProgressEvent extends WebViewNativeEvent {\n    progress: number;\n}\nexport interface WebViewNavigation extends WebViewNativeEvent {\n    navigationType: 'click' | 'formsubmit' | 'backforward' | 'reload' | 'formresubmit' | 'other';\n    mainDocumentURL?: string;\n}\nexport interface ShouldStartLoadRequest extends WebViewNavigation {\n    isTopFrame: boolean;\n}\nexport interface FileDownload {\n    downloadUrl: string;\n}\nexport declare type DecelerationRateConstant = 'normal' | 'fast';\nexport interface WebViewMessage extends WebViewNativeEvent {\n    data: string;\n}\nexport interface WebViewError extends WebViewNativeEvent {\n    /**\n     * `domain` is only used on iOS and macOS\n     */\n    domain?: string;\n    code: number;\n    description: string;\n}\nexport interface WebViewHttpError extends WebViewNativeEvent {\n    description: string;\n    statusCode: number;\n}\nexport interface WebViewRenderProcessGoneDetail {\n    didCrash: boolean;\n}\nexport declare type WebViewEvent = NativeSyntheticEvent<WebViewNativeEvent>;\nexport declare type WebViewProgressEvent = NativeSyntheticEvent<WebViewNativeProgressEvent>;\nexport declare type WebViewNavigationEvent = NativeSyntheticEvent<WebViewNavigation>;\nexport declare type ShouldStartLoadRequestEvent = NativeSyntheticEvent<ShouldStartLoadRequest>;\nexport declare type FileDownloadEvent = NativeSyntheticEvent<FileDownload>;\nexport declare type WebViewMessageEvent = NativeSyntheticEvent<WebViewMessage>;\nexport declare type WebViewErrorEvent = NativeSyntheticEvent<WebViewError>;\nexport declare type WebViewTerminatedEvent = NativeSyntheticEvent<WebViewNativeEvent>;\nexport declare type WebViewHttpErrorEvent = NativeSyntheticEvent<WebViewHttpError>;\nexport declare type WebViewRenderProcessGoneEvent = NativeSyntheticEvent<WebViewRenderProcessGoneDetail>;\nexport declare type DataDetectorTypes = 'phoneNumber' | 'link' | 'address' | 'calendarEvent' | 'trackingNumber' | 'flightNumber' | 'lookupSuggestion' | 'none' | 'all';\nexport declare type OverScrollModeType = 'always' | 'content' | 'never';\nexport declare type CacheMode = 'LOAD_DEFAULT' | 'LOAD_CACHE_ONLY' | 'LOAD_CACHE_ELSE_NETWORK' | 'LOAD_NO_CACHE';\nexport declare type AndroidLayerType = 'none' | 'software' | 'hardware';\nexport interface WebViewSourceUri {\n    /**\n     * The URI to load in the `WebView`. Can be a local or remote file.\n     */\n    uri: string;\n    /**\n     * The HTTP Method to use. Defaults to GET if not specified.\n     * NOTE: On Android, only GET and POST are supported.\n     */\n    method?: string;\n    /**\n     * Additional HTTP headers to send with the request.\n     * NOTE: On Android, this can only be used with GET requests.\n     */\n    headers?: Object;\n    /**\n     * The HTTP body to send with the request. This must be a valid\n     * UTF-8 string, and will be sent exactly as specified, with no\n     * additional encoding (e.g. URL-escaping or base64) applied.\n     * NOTE: On Android, this can only be used with POST requests.\n     */\n    body?: string;\n}\nexport interface WebViewSourceHtml {\n    /**\n     * A static HTML page to display in the WebView.\n     */\n    html: string;\n    /**\n     * The base URL to be used for any relative links in the HTML.\n     */\n    baseUrl?: string;\n}\nexport declare type WebViewSource = WebViewSourceUri | WebViewSourceHtml;\nexport interface ViewManager {\n    startLoadWithResult: Function;\n}\nexport interface WebViewNativeConfig {\n    /**\n     * The native component used to render the WebView.\n     */\n    component?: typeof NativeWebViewIOS | typeof NativeWebViewMacOS | typeof NativeWebViewAndroid;\n    /**\n     * Set props directly on the native component WebView. Enables custom props which the\n     * original WebView doesn't pass through.\n     */\n    props?: Object;\n    /**\n     * Set the ViewManager to use for communication with the native side.\n     * @platform ios, macos\n     */\n    viewManager?: ViewManager;\n}\nexport declare type OnShouldStartLoadWithRequest = (event: ShouldStartLoadRequest) => boolean;\nexport interface CommonNativeWebViewProps extends ViewProps {\n    cacheEnabled?: boolean;\n    incognito?: boolean;\n    injectedJavaScript?: string;\n    injectedJavaScriptBeforeContentLoaded?: string;\n    injectedJavaScriptForMainFrameOnly?: boolean;\n    injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n    javaScriptCanOpenWindowsAutomatically?: boolean;\n    mediaPlaybackRequiresUserAction?: boolean;\n    messagingEnabled: boolean;\n    onScroll?: (event: NativeScrollEvent) => void;\n    onLoadingError: (event: WebViewErrorEvent) => void;\n    onLoadingFinish: (event: WebViewNavigationEvent) => void;\n    onLoadingProgress: (event: WebViewProgressEvent) => void;\n    onLoadingStart: (event: WebViewNavigationEvent) => void;\n    onHttpError: (event: WebViewHttpErrorEvent) => void;\n    onMessage: (event: WebViewMessageEvent) => void;\n    onShouldStartLoadWithRequest: (event: ShouldStartLoadRequestEvent) => void;\n    showsHorizontalScrollIndicator?: boolean;\n    showsVerticalScrollIndicator?: boolean;\n    source: any;\n    userAgent?: string;\n    /**\n     * Append to the existing user-agent. Overridden if `userAgent` is set.\n     */\n    applicationNameForUserAgent?: string;\n}\nexport interface AndroidNativeWebViewProps extends CommonNativeWebViewProps {\n    cacheMode?: CacheMode;\n    allowFileAccess?: boolean;\n    scalesPageToFit?: boolean;\n    allowFileAccessFromFileURLs?: boolean;\n    allowUniversalAccessFromFileURLs?: boolean;\n    androidHardwareAccelerationDisabled?: boolean;\n    androidLayerType?: AndroidLayerType;\n    domStorageEnabled?: boolean;\n    geolocationEnabled?: boolean;\n    javaScriptEnabled?: boolean;\n    mixedContentMode?: 'never' | 'always' | 'compatibility';\n    onContentSizeChange?: (event: WebViewEvent) => void;\n    onRenderProcessGone?: (event: WebViewRenderProcessGoneEvent) => void;\n    overScrollMode?: OverScrollModeType;\n    saveFormDataDisabled?: boolean;\n    setSupportMultipleWindows?: boolean;\n    textZoom?: number;\n    thirdPartyCookiesEnabled?: boolean;\n    messagingModuleName?: string;\n    readonly urlPrefixesForDefaultIntent?: string[];\n}\nexport declare type ContentInsetAdjustmentBehavior = 'automatic' | 'scrollableAxes' | 'never' | 'always';\nexport declare type ContentMode = 'recommended' | 'mobile' | 'desktop';\nexport interface IOSNativeWebViewProps extends CommonNativeWebViewProps {\n    allowingReadAccessToURL?: string;\n    allowsBackForwardNavigationGestures?: boolean;\n    allowsInlineMediaPlayback?: boolean;\n    allowsLinkPreview?: boolean;\n    automaticallyAdjustContentInsets?: boolean;\n    autoManageStatusBarEnabled?: boolean;\n    bounces?: boolean;\n    contentInset?: ContentInsetProp;\n    contentInsetAdjustmentBehavior?: ContentInsetAdjustmentBehavior;\n    contentMode?: ContentMode;\n    readonly dataDetectorTypes?: DataDetectorTypes | DataDetectorTypes[];\n    decelerationRate?: number;\n    directionalLockEnabled?: boolean;\n    hideKeyboardAccessoryView?: boolean;\n    pagingEnabled?: boolean;\n    scrollEnabled?: boolean;\n    useSharedProcessPool?: boolean;\n    onContentProcessDidTerminate?: (event: WebViewTerminatedEvent) => void;\n    injectedJavaScriptForMainFrameOnly?: boolean;\n    injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n    onFileDownload?: (event: FileDownloadEvent) => void;\n}\nexport interface MacOSNativeWebViewProps extends CommonNativeWebViewProps {\n    allowingReadAccessToURL?: string;\n    allowsBackForwardNavigationGestures?: boolean;\n    allowsInlineMediaPlayback?: boolean;\n    allowsLinkPreview?: boolean;\n    automaticallyAdjustContentInsets?: boolean;\n    bounces?: boolean;\n    contentInset?: ContentInsetProp;\n    contentInsetAdjustmentBehavior?: ContentInsetAdjustmentBehavior;\n    directionalLockEnabled?: boolean;\n    hideKeyboardAccessoryView?: boolean;\n    pagingEnabled?: boolean;\n    scrollEnabled?: boolean;\n    useSharedProcessPool?: boolean;\n    onContentProcessDidTerminate?: (event: WebViewTerminatedEvent) => void;\n}\nexport interface WindowsNativeWebViewProps extends CommonNativeWebViewProps {\n    testID?: string;\n}\nexport interface IOSWebViewProps extends WebViewSharedProps {\n    /**\n     * Does not store any data within the lifetime of the WebView.\n     */\n    incognito?: boolean;\n    /**\n     * Boolean value that determines whether the web view bounces\n     * when it reaches the edge of the content. The default value is `true`.\n     * @platform ios\n     */\n    bounces?: boolean;\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use the\n     * string shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS\n     * settings for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively:\n     *\n     *   - normal: 0.998\n     *   - fast: 0.99 (the default for iOS web view)\n     * @platform ios\n     */\n    decelerationRate?: DecelerationRateConstant | number;\n    /**\n     * Boolean value that determines whether scrolling is enabled in the\n     * `WebView`. The default value is `true`.\n     * @platform ios\n     */\n    scrollEnabled?: boolean;\n    /**\n     * If the value of this property is true, the scroll view stops on multiples\n     * of the scroll view’s bounds when the user scrolls.\n     * The default value is false.\n     * @platform ios\n     */\n    pagingEnabled?: boolean;\n    /**\n     * Controls whether to adjust the content inset for web views that are\n     * placed behind a navigation bar, tab bar, or toolbar. The default value\n     * is `true`.\n     * @platform ios\n     */\n    automaticallyAdjustContentInsets?: boolean;\n    /**\n     * This property specifies how the safe area insets are used to modify the\n     * content area of the scroll view. The default value of this property is\n     * \"never\". Available on iOS 11 and later.\n     */\n    contentInsetAdjustmentBehavior?: ContentInsetAdjustmentBehavior;\n    /**\n     * The amount by which the web view content is inset from the edges of\n     * the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.\n     * @platform ios\n     */\n    contentInset?: ContentInsetProp;\n    /**\n     * Defaults to `recommended`, which loads mobile content on iPhone\n     * and iPad Mini but desktop content on other iPads.\n     *\n     * Possible values are:\n     * - `'recommended'`\n     * - `'mobile'`\n     * - `'desktop'`\n     * @platform ios\n     */\n    contentMode?: ContentMode;\n    /**\n     * Determines the types of data converted to clickable URLs in the web view's content.\n     * By default only phone numbers are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * With the new WebKit implementation, we have three new values:\n     * - `'trackingNumber'`,\n     * - `'flightNumber'`,\n     * - `'lookupSuggestion'`,\n     *\n     * @platform ios\n     */\n    readonly dataDetectorTypes?: DataDetectorTypes | DataDetectorTypes[];\n    /**\n     * Boolean that determines whether HTML5 videos play inline or use the\n     * native full-screen controller. The default value is `false`.\n     *\n     * **NOTE** : In order for video to play inline, not only does this\n     * property need to be set to `true`, but the video element in the HTML\n     * document must also include the `webkit-playsinline` attribute.\n     * @platform ios\n     */\n    allowsInlineMediaPlayback?: boolean;\n    /**\n     * Hide the accessory view when the keyboard is open. Default is false to be\n     * backward compatible.\n     */\n    hideKeyboardAccessoryView?: boolean;\n    /**\n     * A Boolean value indicating whether horizontal swipe gestures will trigger\n     * back-forward list navigations.\n     */\n    allowsBackForwardNavigationGestures?: boolean;\n    /**\n     * A Boolean value indicating whether WebKit WebView should be created using a shared\n     * process pool, enabling WebViews to share cookies and localStorage between each other.\n     * Default is true but can be set to false for backwards compatibility.\n     * @platform ios\n     */\n    useSharedProcessPool?: boolean;\n    /**\n     * The custom user agent string.\n     */\n    userAgent?: string;\n    /**\n     * A Boolean value that determines whether pressing on a link\n     * displays a preview of the destination for the link.\n     *\n     * This property is available on devices that support 3D Touch.\n     * In iOS 10 and later, the default value is `true`; before that, the default value is `false`.\n     * @platform ios\n     */\n    allowsLinkPreview?: boolean;\n    /**\n     * Set true if shared cookies from HTTPCookieStorage should used for every load request.\n     * The default value is `false`.\n     * @platform ios\n     */\n    sharedCookiesEnabled?: boolean;\n    /**\n     * Set true if StatusBar should be light when user watch video fullscreen.\n     * The default value is `true`.\n     * @platform ios\n     */\n    autoManageStatusBarEnabled?: boolean;\n    /**\n     * A Boolean value that determines whether scrolling is disabled in a particular direction.\n     * The default value is `true`.\n     * @platform ios\n     */\n    directionalLockEnabled?: boolean;\n    /**\n     * A Boolean value indicating whether web content can programmatically display the keyboard.\n     *\n     * When this property is set to true, the user must explicitly tap the elements in the\n     * web view to display the keyboard (or other relevant input view) for that element.\n     * When set to false, a focus event on an element causes the input view to be displayed\n     * and associated with that element automatically.\n     *\n     * The default value is `true`.\n     * @platform ios\n     */\n    keyboardDisplayRequiresUserAction?: boolean;\n    /**\n     * A String value that indicates which URLs the WebView's file can then\n     * reference in scripts, AJAX requests, and CSS imports. This is only used\n     * for WebViews that are loaded with a source.uri set to a `'file://'` URL.\n     *\n     * If not provided, the default is to only allow read access to the URL\n     * provided in source.uri itself.\n     * @platform ios\n     */\n    allowingReadAccessToURL?: string;\n    /**\n     * Function that is invoked when the WebKit WebView content process gets terminated.\n     * @platform ios\n     */\n    onContentProcessDidTerminate?: (event: WebViewTerminatedEvent) => void;\n    /**\n     * If `true` (default), loads the `injectedJavaScript` only into the main frame.\n     * If `false`, loads it into all frames (e.g. iframes).\n     * @platform ios\n    */\n    injectedJavaScriptForMainFrameOnly?: boolean;\n    /**\n     * If `true` (default), loads the `injectedJavaScriptBeforeContentLoaded` only into the main frame.\n     * If `false`, loads it into all frames (e.g. iframes).\n     * @platform ios\n    */\n    injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n    /**\n     * Boolean value that determines whether a pull to refresh gesture is\n     * available in the `WebView`. The default value is `false`.\n     * If `true`, sets `bounces` automatically to `true`\n     * @platform ios\n     *\n    */\n    pullToRefreshEnabled?: boolean;\n    /**\n     * Function that is invoked when the client needs to download a file.\n     *\n     * iOS 13+ only: If the webview navigates to a URL that results in an HTTP\n     * response with a Content-Disposition header 'attachment...', then\n     * this will be called.\n     *\n     * iOS 8+: If the MIME type indicates that the content is not renderable by the\n     * webview, that will also cause this to be called. On iOS versions before 13,\n     * this is the only condition that will cause this function to be called.\n     *\n     * The application will need to provide its own code to actually download\n     * the file.\n     *\n     * If not provided, the default is to let the webview try to render the file.\n     */\n    onFileDownload?: (event: FileDownloadEvent) => void;\n}\nexport interface MacOSWebViewProps extends WebViewSharedProps {\n    /**\n     * Does not store any data within the lifetime of the WebView.\n     */\n    incognito?: boolean;\n    /**\n     * Boolean value that determines whether the web view bounces\n     * when it reaches the edge of the content. The default value is `true`.\n     * @platform macos\n     */\n    bounces?: boolean;\n    /**\n     * Boolean value that determines whether scrolling is enabled in the\n     * `WebView`. The default value is `true`.\n     * @platform macos\n     */\n    scrollEnabled?: boolean;\n    /**\n     * If the value of this property is true, the scroll view stops on multiples\n     * of the scroll view’s bounds when the user scrolls.\n     * The default value is false.\n     * @platform macos\n     */\n    pagingEnabled?: boolean;\n    /**\n     * Controls whether to adjust the content inset for web views that are\n     * placed behind a navigation bar, tab bar, or toolbar. The default value\n     * is `true`.\n     * @platform macos\n     */\n    automaticallyAdjustContentInsets?: boolean;\n    /**\n     * This property specifies how the safe area insets are used to modify the\n     * content area of the scroll view. The default value of this property is\n     * \"never\". Available on iOS 11 and later.\n     */\n    contentInsetAdjustmentBehavior?: ContentInsetAdjustmentBehavior;\n    /**\n     * The amount by which the web view content is inset from the edges of\n     * the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.\n     * @platform macos\n     */\n    contentInset?: ContentInsetProp;\n    /**\n     * Boolean that determines whether HTML5 videos play inline or use the\n     * native full-screen controller. The default value is `false`.\n     *\n     * **NOTE** : In order for video to play inline, not only does this\n     * property need to be set to `true`, but the video element in the HTML\n     * document must also include the `webkit-playsinline` attribute.\n     * @platform macos\n     */\n    allowsInlineMediaPlayback?: boolean;\n    /**\n     * Hide the accessory view when the keyboard is open. Default is false to be\n     * backward compatible.\n     */\n    hideKeyboardAccessoryView?: boolean;\n    /**\n     * A Boolean value indicating whether horizontal swipe gestures will trigger\n     * back-forward list navigations.\n     */\n    allowsBackForwardNavigationGestures?: boolean;\n    /**\n     * A Boolean value indicating whether WebKit WebView should be created using a shared\n     * process pool, enabling WebViews to share cookies and localStorage between each other.\n     * Default is true but can be set to false for backwards compatibility.\n     * @platform macos\n     */\n    useSharedProcessPool?: boolean;\n    /**\n     * The custom user agent string.\n     */\n    userAgent?: string;\n    /**\n     * A Boolean value that determines whether pressing on a link\n     * displays a preview of the destination for the link.\n     *\n     * This property is available on devices that support Force Touch trackpad.\n     * @platform macos\n     */\n    allowsLinkPreview?: boolean;\n    /**\n     * Set true if shared cookies from HTTPCookieStorage should used for every load request.\n     * The default value is `false`.\n     * @platform macos\n     */\n    sharedCookiesEnabled?: boolean;\n    /**\n     * A Boolean value that determines whether scrolling is disabled in a particular direction.\n     * The default value is `true`.\n     * @platform macos\n     */\n    directionalLockEnabled?: boolean;\n    /**\n     * A Boolean value indicating whether web content can programmatically display the keyboard.\n     *\n     * When this property is set to true, the user must explicitly tap the elements in the\n     * web view to display the keyboard (or other relevant input view) for that element.\n     * When set to false, a focus event on an element causes the input view to be displayed\n     * and associated with that element automatically.\n     *\n     * The default value is `true`.\n     * @platform macos\n     */\n    keyboardDisplayRequiresUserAction?: boolean;\n    /**\n     * A String value that indicates which URLs the WebView's file can then\n     * reference in scripts, AJAX requests, and CSS imports. This is only used\n     * for WebViews that are loaded with a source.uri set to a `'file://'` URL.\n     *\n     * If not provided, the default is to only allow read access to the URL\n     * provided in source.uri itself.\n     * @platform macos\n     */\n    allowingReadAccessToURL?: string;\n    /**\n     * Function that is invoked when the WebKit WebView content process gets terminated.\n     * @platform macos\n     */\n    onContentProcessDidTerminate?: (event: WebViewTerminatedEvent) => void;\n}\nexport interface AndroidWebViewProps extends WebViewSharedProps {\n    onNavigationStateChange?: (event: WebViewNavigation) => void;\n    onContentSizeChange?: (event: WebViewEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` process crashes or is killed by the OS.\n     * Works only on Android (minimum API level 26).\n     */\n    onRenderProcessGone?: (event: WebViewRenderProcessGoneEvent) => void;\n    /**\n     * https://developer.android.com/reference/android/webkit/WebSettings.html#setCacheMode(int)\n     * Set the cacheMode. Possible values are:\n     *\n     * - `'LOAD_DEFAULT'` (default)\n     * - `'LOAD_CACHE_ELSE_NETWORK'`\n     * - `'LOAD_NO_CACHE'`\n     * - `'LOAD_CACHE_ONLY'`\n     *\n     * @platform android\n     */\n    cacheMode?: CacheMode;\n    /**\n     * https://developer.android.com/reference/android/view/View#OVER_SCROLL_NEVER\n     * Sets the overScrollMode. Possible values are:\n     *\n     * - `'always'` (default)\n     * - `'content'`\n     * - `'never'`\n     *\n     * @platform android\n     */\n    overScrollMode?: OverScrollModeType;\n    /**\n     * Boolean that controls whether the web content is scaled to fit\n     * the view and enables the user to change the scale. The default value\n     * is `true`.\n     */\n    scalesPageToFit?: boolean;\n    /**\n     * Sets whether Geolocation is enabled. The default is false.\n     * @platform android\n     */\n    geolocationEnabled?: boolean;\n    /**\n     * Boolean that sets whether JavaScript running in the context of a file\n     * scheme URL should be allowed to access content from other file scheme URLs.\n     * Including accessing content from other file scheme URLs\n     * @platform android\n     */\n    allowFileAccessFromFileURLs?: boolean;\n    /**\n     * Boolean that sets whether JavaScript running in the context of a file\n     * scheme URL should be allowed to access content from any origin.\n     * Including accessing content from other file scheme URLs\n     * @platform android\n     */\n    allowUniversalAccessFromFileURLs?: boolean;\n    /**\n     * Sets whether the webview allow access to file system.\n     * @platform android\n     */\n    allowFileAccess?: boolean;\n    /**\n     * Used on Android only, controls whether form autocomplete data should be saved\n     * @platform android\n     */\n    saveFormDataDisabled?: boolean;\n    /**\n     * Boolean value to set whether the WebView supports multiple windows. Used on Android only\n     * The default value is `true`.\n     * @platform android\n     */\n    setSupportMultipleWindows?: boolean;\n    /**\n     * Used on Android only, controls whether the given list of URL prefixes should\n     * make {@link com.facebook.react.views.webview.ReactWebViewClient} to launch a\n     * default activity intent for those URL instead of loading it within the webview.\n     * Use this to list URLs that WebView cannot handle, e.g. a PDF url.\n     * @platform android\n     */\n    readonly urlPrefixesForDefaultIntent?: string[];\n    /**\n     * Boolean value to disable Hardware Acceleration in the `WebView`. Used on Android only\n     * as Hardware Acceleration is a feature only for Android. The default value is `false`.\n     * @platform android\n     */\n    androidHardwareAccelerationDisabled?: boolean;\n    /**\n   * https://developer.android.com/reference/android/webkit/WebView#setLayerType(int,%20android.graphics.Paint)\n   * Sets the layerType. Possible values are:\n   *\n   * - `'none'` (default)\n   * - `'software'`\n   * - `'hardware'`\n   *\n   * @platform android\n   */\n    androidLayerType?: AndroidLayerType;\n    /**\n     * Boolean value to enable third party cookies in the `WebView`. Used on\n     * Android Lollipop and above only as third party cookies are enabled by\n     * default on Android Kitkat and below and on iOS. The default value is `true`.\n     * @platform android\n     */\n    thirdPartyCookiesEnabled?: boolean;\n    /**\n     * Boolean value to control whether DOM Storage is enabled. Used only in\n     * Android.\n     * @platform android\n     */\n    domStorageEnabled?: boolean;\n    /**\n     * Sets the user-agent for the `WebView`.\n     * @platform android\n     */\n    userAgent?: string;\n    /**\n     * Sets number that controls text zoom of the page in percent.\n     * @platform android\n     */\n    textZoom?: number;\n    /**\n     * Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.\n     *\n     * Possible values for `mixedContentMode` are:\n     *\n     * - `'never'` (default) - WebView will not allow a secure origin to load content from an insecure origin.\n     * - `'always'` - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.\n     * - `'compatibility'` -  WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.\n     * @platform android\n     */\n    mixedContentMode?: 'never' | 'always' | 'compatibility';\n    /**\n     * Sets ability to open fullscreen videos on Android devices.\n     */\n    allowsFullscreenVideo?: boolean;\n}\nexport interface WebViewSharedProps extends ViewProps {\n    /**\n     * Loads static html or a uri (with optional headers) in the WebView.\n     */\n    source?: WebViewSource;\n    /**\n     * Boolean value to enable JavaScript in the `WebView`. Used on Android only\n     * as JavaScript is enabled by default on iOS. The default value is `true`.\n     * @platform android\n     */\n    javaScriptEnabled?: boolean;\n    /**\n     * A Boolean value indicating whether JavaScript can open windows without user interaction.\n     * The default value is `false`.\n     */\n    javaScriptCanOpenWindowsAutomatically?: boolean;\n    /**\n     * Stylesheet object to set the style of the container view.\n     */\n    containerStyle?: StyleProp<ViewStyle>;\n    /**\n     * Function that returns a view to show if there's an error.\n     */\n    renderError?: (errorDomain: string | undefined, errorCode: number, errorDesc: string) => ReactElement;\n    /**\n     * Function that returns a loading indicator.\n     */\n    renderLoading?: () => ReactElement;\n    /**\n     * Function that is invoked when the `WebView` scrolls.\n     */\n    onScroll?: (event: NativeScrollEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` has finished loading.\n     */\n    onLoad?: (event: WebViewNavigationEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` load succeeds or fails.\n     */\n    onLoadEnd?: (event: WebViewNavigationEvent | WebViewErrorEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` starts loading.\n     */\n    onLoadStart?: (event: WebViewNavigationEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` load fails.\n     */\n    onError?: (event: WebViewErrorEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` receives an error status code.\n     * Works on iOS and Android (minimum API level 23).\n     */\n    onHttpError?: (event: WebViewHttpErrorEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` loading starts or ends.\n     */\n    onNavigationStateChange?: (event: WebViewNavigation) => void;\n    /**\n     * Function that is invoked when the webview calls `window.ReactNativeWebView.postMessage`.\n     * Setting this property will inject this global into your webview.\n     *\n     * `window.ReactNativeWebView.postMessage` accepts one argument, `data`, which will be\n     * available on the event object, `event.nativeEvent.data`. `data` must be a string.\n     */\n    onMessage?: (event: WebViewMessageEvent) => void;\n    /**\n     * Function that is invoked when the `WebView` is loading.\n     */\n    onLoadProgress?: (event: WebViewProgressEvent) => void;\n    /**\n     * Boolean value that forces the `WebView` to show the loading view\n     * on the first load.\n     */\n    startInLoadingState?: boolean;\n    /**\n     * Set this to provide JavaScript that will be injected into the web page\n     * when the view loads.\n     */\n    injectedJavaScript?: string;\n    /**\n     * Set this to provide JavaScript that will be injected into the web page\n     * once the webview is initialized but before the view loads any content.\n     */\n    injectedJavaScriptBeforeContentLoaded?: string;\n    /**\n     * If `true` (default; mandatory for Android), loads the `injectedJavaScript` only into the main frame.\n     * If `false` (only supported on iOS and macOS), loads it into all frames (e.g. iframes).\n     */\n    injectedJavaScriptForMainFrameOnly?: boolean;\n    /**\n     * If `true` (default; mandatory for Android), loads the `injectedJavaScriptBeforeContentLoaded` only into the main frame.\n     * If `false` (only supported on iOS and macOS), loads it into all frames (e.g. iframes).\n     */\n    injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n    /**\n     * Boolean value that determines whether a horizontal scroll indicator is\n     * shown in the `WebView`. The default value is `true`.\n     */\n    showsHorizontalScrollIndicator?: boolean;\n    /**\n     * Boolean value that determines whether a vertical scroll indicator is\n     * shown in the `WebView`. The default value is `true`.\n     */\n    showsVerticalScrollIndicator?: boolean;\n    /**\n     * Boolean that determines whether HTML5 audio and video requires the user\n     * to tap them before they start playing. The default value is `true`.\n     */\n    mediaPlaybackRequiresUserAction?: boolean;\n    /**\n     * List of origin strings to allow being navigated to. The strings allow\n     * wildcards and get matched against *just* the origin (not the full URL).\n     * If the user taps to navigate to a new page but the new page is not in\n     * this whitelist, we will open the URL in Safari.\n     * The default whitelisted origins are \"http://*\" and \"https://*\".\n     */\n    readonly originWhitelist?: string[];\n    /**\n     * Function that allows custom handling of any web view requests. Return\n     * `true` from the function to continue loading the request and `false`\n     * to stop loading. The `navigationType` is always `other` on android.\n     */\n    onShouldStartLoadWithRequest?: OnShouldStartLoadWithRequest;\n    /**\n     * Override the native component used to render the WebView. Enables a custom native\n     * WebView which uses the same JavaScript as the original WebView.\n     */\n    nativeConfig?: WebViewNativeConfig;\n    /**\n     * Should caching be enabled. Default is true.\n     */\n    cacheEnabled?: boolean;\n    /**\n     * Append to the existing user-agent. Overridden if `userAgent` is set.\n     */\n    applicationNameForUserAgent?: string;\n}\nexport {};\n//# sourceMappingURL=WebViewTypes.d.ts.map"]}