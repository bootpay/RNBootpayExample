{"version":3,"sources":["WebView.ios.d.ts"],"names":["React","WebView"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;gBAEcC,O;;gBAAAA,O","sourcesContent":["import React from 'react';\nimport { WebViewErrorEvent, WebViewHttpErrorEvent, WebViewMessageEvent, WebViewNavigationEvent, WebViewProgressEvent, WebViewTerminatedEvent, IOSWebViewProps, NativeWebViewIOS, State } from './WebViewTypes';\ndeclare class WebView extends React.Component<IOSWebViewProps, State> {\n    static defaultProps: {\n        javaScriptEnabled: boolean;\n        cacheEnabled: boolean;\n        originWhitelist: string[];\n        useSharedProcessPool: boolean;\n    };\n    static isFileUploadSupported: () => Promise<boolean>;\n    state: State;\n    webViewRef: React.RefObject<NativeWebViewIOS>;\n    getCommands: () => {\n        goForward: number;\n        goBack: number;\n        reload: number;\n        stopLoading: number;\n        postMessage: number;\n        injectJavaScript: number;\n        loadUrl: number;\n        requestFocus: number;\n    };\n    /**\n     * Go forward one page in the web view's history.\n     */\n    goForward: () => void;\n    /**\n     * Go back one page in the web view's history.\n     */\n    goBack: () => void;\n    /**\n     * Reloads the current page.\n     */\n    reload: () => void;\n    /**\n     * Stop loading the current page.\n     */\n    stopLoading: () => void;\n    /**\n     * Request focus on WebView rendered page.\n     */\n    requestFocus: () => void;\n    /**\n     * Posts a message to the web view, which will emit a `message` event.\n     * Accepts one argument, `data`, which must be a string.\n     *\n     * In your webview, you'll need to something like the following.\n     *\n     * ```js\n     * document.addEventListener('message', e => { document.title = e.data; });\n     * ```\n     */\n    postMessage: (data: string) => void;\n    /**\n     * Injects a javascript string into the referenced WebView. Deliberately does not\n     * return a response because using eval() to return a response breaks this method\n     * on pages with a Content Security Policy that disallows eval(). If you need that\n     * functionality, look into postMessage/onMessage.\n     */\n    injectJavaScript: (data: string) => void;\n    /**\n     * We return an event with a bunch of fields including:\n     *  url, title, loading, canGoBack, canGoForward\n     */\n    updateNavigationState: (event: WebViewNavigationEvent) => void;\n    /**\n     * Returns the native `WebView` node.\n     */\n    getWebViewHandle: () => number;\n    onLoadingStart: (event: WebViewNavigationEvent) => void;\n    onLoadingError: (event: WebViewErrorEvent) => void;\n    onHttpError: (event: WebViewHttpErrorEvent) => void;\n    onLoadingFinish: (event: WebViewNavigationEvent) => void;\n    onMessage: (event: WebViewMessageEvent) => void;\n    onLoadingProgress: (event: WebViewProgressEvent) => void;\n    onShouldStartLoadWithRequestCallback: (shouldStart: boolean, _url: string, lockIdentifier: number) => void;\n    onContentProcessDidTerminate: (event: WebViewTerminatedEvent) => void;\n    componentDidUpdate(prevProps: IOSWebViewProps): void;\n    showRedboxOnPropChanges(prevProps: IOSWebViewProps, propName: keyof IOSWebViewProps): void;\n    render(): JSX.Element;\n}\nexport default WebView;\n//# sourceMappingURL=WebView.ios.d.ts.map"]}